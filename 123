import psycopg2
import os
import tkinter as tk
from tkinter import messagebox

# Функция для удаления старой базы данных (если существует)
def delete_old_db():
    # Подключаемся к PostgreSQL и удаляем базу данных
    conn = psycopg2.connect(
        dbname='postgres', 
        user='postgres', 
        password='123', 
        host='localhost', 
        port='5432',
        client_encoding='UTF8'
    )
    conn.autocommit = True  # Нужно для выполнения команды DROP DATABASE
    cursor = conn.cursor()

    try:
        cursor.execute('DROP DATABASE IF EXISTS example')
        messagebox.showinfo("Database", "Database 'example' has been dropped (if it existed).")
    except Exception as e:
        messagebox.showerror("Error", f"Error dropping database: {e}")
    finally:
        cursor.close()
        conn.close()

# Функция для создания базы данных и заполнения ее данными
def create_db():
    # Подключение к PostgreSQL
    conn = psycopg2.connect(
        dbname='postgres', 
        user='your_user', 
        password='your_password', 
        host='localhost', 
        port='5432'
    )
    conn.autocommit = True
    cursor = conn.cursor()

    try:
        # Создаем базу данных
        cursor.execute("CREATE DATABASE example")
        messagebox.showinfo("Database", "Database 'example' has been created.")
    except Exception as e:
        messagebox.showerror("Error", f"Error creating database: {e}")
    finally:
        cursor.close()
        conn.close()

    # Теперь подключаемся к базе данных 'example'
    conn = psycopg2.connect(
        dbname='example', 
        user='your_user', 
        password='your_password', 
        host='localhost', 
        port='5432'
    )
    cursor = conn.cursor()

    # Создаем таблицы
    cursor.execute('''CREATE TABLE IF NOT EXISTS customers (
        customer_id SERIAL PRIMARY KEY,
        name TEXT,
        email TEXT
    )''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS orders (
        order_id SERIAL PRIMARY KEY,
        order_date DATE,
        customer_id INTEGER,
        FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
    )''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS products (
        product_id SERIAL PRIMARY KEY,
        name TEXT,
        price REAL
    )''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS order_products (
        order_id INTEGER,
        product_id INTEGER,
        quantity INTEGER,
        FOREIGN KEY (order_id) REFERENCES orders(order_id),
        FOREIGN KEY (product_id) REFERENCES products(product_id),
        PRIMARY KEY (order_id, product_id)
    )''')

    # Заполняем таблицы данными
    cursor.executemany('''INSERT INTO customers (name, email) VALUES (%s, %s)''', [
        ('Alice', 'alice@example.com'),
        ('Bob', 'bob@example.com'),
        ('Charlie', 'charlie@example.com')
    ])

    cursor.executemany('''INSERT INTO orders (order_date, customer_id) VALUES (%s, %s)''', [
        ('2025-01-01', 1),
        ('2025-01-02', 2),
        ('2025-01-03', 3)
    ])

    cursor.executemany('''INSERT INTO products (name, price) VALUES (%s, %s)''', [
        ('Laptop', 1000.0),
        ('Phone', 500.0),
        ('Tablet', 300.0)
    ])

    cursor.executemany('''INSERT INTO order_products (order_id, product_id, quantity) VALUES (%s, %s, %s)''', [
        (1, 1, 1),
        (1, 2, 2),
        (2, 2, 1),
        (3, 3, 3),
        (3, 1, 1)
    ])

    conn.commit()
    return conn

# Функция для обновления данных по условию
def update_data(conn, table, filter_condition, new_values):
    cursor = conn.cursor()

    try:
        # Проверка на корректность обновляемых значений
        if not new_values:
            raise ValueError("New values cannot be empty!")

        # Проверка, чтобы столбцы для обновления существовали в таблице
        cursor.execute(f"SELECT column_name FROM information_schema.columns WHERE table_name = '{table}'")
        columns = [column_info[0] for column_info in cursor.fetchall()]
        for column in new_values.keys():
            if column not in columns:
                raise ValueError(f"Column '{column}' does not exist in table '{table}'")

        # Обновление данных по всем столбцам без ограничений
        set_clause = ', '.join([f"{column} = %s" for column in new_values.keys()])
        values = list(new_values.values())

        cursor.execute(f'''
            UPDATE {table} SET {set_clause} WHERE {filter_condition}
        ''', values)

        conn.commit()
        messagebox.showinfo("Success", f"Data updated in {table} table!")
    except ValueError as ve:
        messagebox.showerror("Error", f"Error: {str(ve)}")
        conn.rollback()  # Откатить изменения, если была ошибка
    except psycopg2.OperationalError as e:
        messagebox.showerror("Error", f"Database error: {str(e)}")
        conn.rollback()  # Откатить изменения, если была ошибка базы данных
    except Exception as e:
        messagebox.showerror("Error", f"Unexpected error: {str(e)}")
        conn.rollback()  # Откатить изменения, если была неизвестная ошибка

# Подключение и настройка Tkinter
def create_gui():
    # Удаляем старую базу данных (если существует)
    delete_old_db()

    # Создание главного окна
    window = tk.Tk()
    window.title("Database Viewer")

    # Создаем подключение к базе данных PostgreSQL
    global conn
    conn = create_db()

    # Запуск главного цикла
    window.mainloop()

if __name__ == '__main__':
    create_gui()
